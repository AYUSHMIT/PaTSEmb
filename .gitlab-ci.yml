# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

stages:
  - unit-test
  - documentation

####################################################################################
#################################### UNIT TESTS ####################################
####################################################################################

# A template to run the different  unittests  in the different subpackages in separate jobs
.unit-test:
  stage: unit-test
  variables:
    PYTHON_VERSION: ""
    DISABLE_NUMBA: 1
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  image: python:$PYTHON_VERSION
  services:
    - maven:3.3.9-jdk-8
  before_script:
    # Install java
    - apt update
    - wget https://download.java.net/java/GA/jdk21.0.2/f2283984656d49d69e91c558476027ac/13/GPL/openjdk-21.0.2_linux-x64_bin.tar.gz
    - tar xvf openjdk-21.0.2_linux-x64_bin.tar.gz
    - mv jdk-21.0.2/ /usr/local/jdk-21
    - tee -a  /etc/profile.d/jdk21.sh<<EOF
    - export JAVA_HOME=/usr/local/jdk-21
    - export PATH=\$PATH:\$JAVA_HOME/bin
    - EOF
    - source /etc/profile.d/jdk21.sh
    # Check the versions
    - java -version
    - python --version
    - pip --version
    # Install requirements
    - pip install -r requirements.txt
    - pip install pytest pytest-cov  # Packages for testing purposes
    - pip list
    # Disable numba for proper coverage measurements
    - export NUMBA_DISABLE_JIT=$DISABLE_NUMBA
    - echo $NUMBA_DISABLE_JIT
  script:
    # Test the requested package, print the code coverage, and generate a xml report of the tests
    - pytest ./tests/ --cov ./patsemb/ --cov-report term-missing --junitxml=report.xml -v
  coverage: '/(?i)TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      junit: report.xml
    expire_in: 1 weeks

# Execute all the unit tests with Numba, ensuring fast execution
# Should only run when the other jobs are not being executed (i.e., not for merge requests to main branch)
unit-test-numba:
  extends: .unit-test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - when: on_success
  variables:
    PYTHON_VERSION: "3.10"
    DISABLE_NUMBA: 0

# Execute extensive unit tests for multiple Python versions
unit-test-3.8:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.8"

unit-test-3.9:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.9"

unit-test-3.10:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.10"

unit-test-3.11:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.11"

unit-test-3.12:
  extends: .unit-test
  variables:
    PYTHON_VERSION: "3.12"

####################################################################################
################################### DOCUMENTATION ##################################
####################################################################################

# A template for the documentation jobs
.documentation:
  stage: documentation
  image: python:3.10-slim
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == 'documentation'
  before_script:
    # Install make
    - apt-get update && apt-get install make --no-install-recommends -y
    # Install the required python packages
    - pip install -r requirements.txt
    - pip install sphinx toml sphinx_rtd_theme nbsphinx
    - pip list
    # Move to the correct directory already
    - cd docs

# Check the code in the documentation
doctest:
  extends: .documentation
  script:
    - make doctest

# Generate the documentation
pages:
  extends: .documentation
  script:
    - make html
  after_script:
    - mv docs/_build/html/ ./public/
  artifacts:
    paths:
    - public
